# We set the language to c because python isn't supported on the MacOS X nodes
# on Travis. However, the language ends up being irrelevant anyway, since we
# install Python ourselves using conda.
language: c

os:
    - linux

# The apt packages below are needed for sphinx builds. A full list of packages
# that can be included can be found here:
#
# https://github.com/travis-ci/apt-package-whitelist/blob/master/ubuntu-precise

addons:
    apt:
        packages:
            - graphviz

env:
    global:
        # Define Conda Version
        - MINICONDA_VERSION=4.7.12
    
        # The following versions are the 'default' for tests, unless
        # overridden underneath. They are defined here in order to save having
        # to repeat them for all configurations.
        - PYTHON_VERSION=3.7
        - NUMPY_VERSION=stable
        - ASTROPY_VERSION=stable
        - MAIN_CMD='python setup.py'
        - SETUP_CMD='test'
        - VERYSLOW='false'
        - EVENT_TYPE='pull_request push'


        # Main conda environment file
        - CONDA_ENVIRONMENT='environment.yml'

        
        # List runtime dependencies for the package that are available as conda
        # packages here.
        #- CONDA_DEPENDENCIES=''
        #- CONDA_DEPENDENCIES_DOC='sphinx-astropy'
        
        # List other runtime dependencies for the package that are available as
        # pip packages here.
        - PIP_DEPENDENCIES=''

        # Conda packages for affiliated packages are hosted in channel
        # "astropy" while builds for astropy LTS with recent numpy versions
        # are in astropy-ci-extras. If your package uses either of these,
        # add the channels to CONDA_CHANNELS along with any other channels
        # you want to use.
        - CONDA_CHANNELS='astropy'

        # If there are matplotlib or other GUI tests, uncomment the following
        # line to use the X virtual framebuffer.
        # - SETUP_XVFB=True

        # If you want to ignore certain flake8 errors, you can list them
        # in FLAKE8_OPT, for example:
        # - FLAKE8_OPT='--ignore=E501'
        - FLAKE8_OPT=''

matrix:

    # Don't wait for allowed failures
    fast_finish: true

    include:
        # Make sure that egg_info works without dependencies
        - name: "Simple Install"
          env: PYTHON_VERSION=3.7 SETUP_CMD='egg_info'

        # Check for sphinx doc build warnings - we do this first because it
        # may run for a long time
        - name: "Doc Build Test"
          os: linux
          env: SETUP_CMD='build_docs -w'
               CONDA_ENVIRONMENT='.rtd-environment.yml'

        # Main test
        # ---------------------------
        - name: "Main Test"
          os: linux

        # Test python 2.7
        - name: "Main Test [Python 2.7]"
          python: 2.7
        # ---------------------------

        # Try MacOS X, usually enough only to run from cron as hardly there are
        # issues that are not picked up by a linux worker
        - name: "MacOS X"
          os: osx
          env: EVENT_TYPE='cron'


        # Add a job that runs from cron only and tests against astropy dev and
        # numpy dev to give a change for early discovery of issues and feedback
        # for both developer teams.

        - name: "ASTROPY and NUMPY_VERSION Dev"
          os: linux
          env: ASTROPY_VERSION=development NUMPY_VERSION=development
               EVENT_TYPE='cron'

        # Tests Allowed to Fail
        # ---------------------
        - name: "veryslow"
          os: linux
          env: SETUP_CMD='test' VERYSLOW=true

    allow_failures:

        - name: "veryslow"


before_install:

    # Make data dir
    - mkdir $TRAVIS_BUILD_DIR/test_data
    - TEST_DATA_PATH=$TRAVIS_BUILD_DIR/test_data

    # Download stips data
    - wget https://stsci.box.com/shared/static/4nebx2ndxr7c77lgocfbvxo7c2hyd3in.tgz -O $TEST_DATA_PATH/stips_data_current.tar.gz
    - tar -xzvf $TEST_DATA_PATH/stips_data_current.tar.gz -C $TEST_DATA_PATH/
    - export stips_data=$TEST_DATA_PATH/stips_data

    # download synphot data
    - mkdir $TEST_DATA_PATH/synphot

    - wget -qO- https://ssb.stsci.edu/trds/tarfiles/synphot1.tar.gz -O $TEST_DATA_PATH/synphot1.tar.gz
    - wget -qO- https://ssb.stsci.edu/trds/tarfiles/synphot2.tar.gz -O $TEST_DATA_PATH/synphot2.tar.gz
    - wget -qO- https://ssb.stsci.edu/trds/tarfiles/synphot5.tar.gz -O $TEST_DATA_PATH/synphot5.tar.gz
    - wget -qO- https://ssb.stsci.edu/trds/tarfiles/synphot6.tar.gz -O $TEST_DATA_PATH/synphot6.tar.gz

    - tar -xzvf $TEST_DATA_PATH/synphot1.tar.gz -C $TEST_DATA_PATH/synphot/
    - tar -xzvf $TEST_DATA_PATH/synphot2.tar.gz -C $TEST_DATA_PATH/synphot/
    - tar -xzvf $TEST_DATA_PATH/synphot5.tar.gz -C $TEST_DATA_PATH/synphot/
    - tar -xzvf $TEST_DATA_PATH/synphot6.tar.gz -C $TEST_DATA_PATH/synphot/

    - export PYSYN_CDBS=$TEST_DATA_PATH/synphot/grp/hst/cdbs

    # download pandeia_data data
    - wget -qO- https://stsci.box.com/shared/static/7voehzi5krrpml5wgyg8bo954ew7arh2.gz -O $TEST_DATA_PATH/pandeia_data-1.5.2rc2_roman.gz

    - tar -xzvf $TEST_DATA_PATH/pandeia_data-1.5.2rc2_roman.gz -C $TEST_DATA_PATH/
    - export pandeia_refdata=$TEST_DATA_PATH/pandeia_data-1.5.2rc2_roman

    # download webbpsf data
    - wget -qO- https://stsci.box.com/shared/static/qcptcokkbx7fgi3c00w2732yezkxzb99.gz -O $TEST_DATA_PATH/webbpsf_data.gz
    - tar -xzvf $TEST_DATA_PATH/webbpsf_data.gz -C $TEST_DATA_PATH/
    - export WEBBPSF_PATH=$TEST_DATA_PATH/webbpsf-data

    # If VERYSLOW is set to false for a test, add args to pytest
    # The format (... "..") is because there are multiple quotation marks in bash
    # They variable will be constructed into a command via "${extra_args[@]}"
    - |
     if [[ $VERYSLOW == 'false' &&  $SETUP_CMD == 'test' ]]; then
            echo "Testing functions without veryslow marker"
            extra_args=(-a "-m 'not veryslow'");
     else
            extra_args=();
     fi

install:

    # We now use the ci-helpers package to set up our testing environment.
    # This is done by using Miniconda and then using conda and pip to install
    # dependencies. Which dependencies are installed using conda and pip is
    # determined by the CONDA_DEPENDENCIES and PIP_DEPENDENCIES variables,
    # which should be space-delimited lists of package names. See the README
    # in https://github.com/astropy/ci-helpers for information about the full
    # list of environment variables that can be used to customize your
    # environment. In some cases, ci-helpers may not offer enough flexibility
    # in how to install a package, in which case you can have additional
    # commands in the install: section below.

#    - echo "Starting ci-helpers install"
#    - git clone --depth 1 git://github.com/astropy/ci-helpers.git
#    - echo "Git cloned"
#    - source ci-helpers/travis/setup_conda.sh
#    - echo "Miniconda Installed"

    # Now trying to do this with miniconda directly instead of via ci-helpers

    # We do this conditionally because it saves us some downloading if the
    # version is the same.
    - if [[ "$PYTHON_VERSION" == "2.7" ]]; then
        wget https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh -O miniconda.sh;
      else
        wget https://repo.continuum.io/miniconda/Miniconda3-py37_4.8.3-Linux-x86_64.sh -O miniconda.sh;
      fi
    - bash miniconda.sh -b -p $HOME/miniconda
    - source "$HOME/miniconda/etc/profile.d/conda.sh"
    - hash -r
    - conda config --set always_yes yes --set changeps1 no
    - conda update -q conda
    # Useful for debugging any issues with conda
    - conda info -a

    # Replace dep1 dep2 ... with your dependencies
    - conda create -q -n stips python=$PYTHON_VERSION
    - conda activate test-environment
    - echo "Finished Conda Install"

    # As described above, using ci-helpers, you should be able to set up an
    # environment with dependencies installed using conda and pip, but in some
    # cases this may not provide enough flexibility in how to install a
    # specific dependency (and it will not be able to install non-Python
    # dependencies). Therefore, you can also include commands below (as
    # well as at the start of the install section or in the before_install
    # section if they are needed before setting up conda) to install any
    # other dependencies.

    # Here we download miniconda and install the dependencies
    #- conda activate stips

script:
   - $MAIN_CMD $SETUP_CMD "${extra_args[@]}"

after_success:
    # If coveralls.io is set up for this package, uncomment the line below.
    # The coveragerc file may be customized as needed for your package.
    # - if [[ $SETUP_CMD == *coverage* ]]; then coveralls --rcfile='stips/tests/coveragerc'; fi
