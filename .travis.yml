# We set the language to c because python isn't supported on the MacOS X nodes
# on Travis. However, the language ends up being irrelevant anyway, since we
# install Python ourselves using conda.
language: c

os:
    - linux

services:
  - docker

# The apt packages below are needed for sphinx builds. A full list of packages
# that can be included can be found here:
#
# https://github.com/travis-ci/apt-package-whitelist/blob/master/ubuntu-precise

addons:
    apt:
        packages:
            - graphviz


stages:
   # Do the style check and a single test job, don't proceed if it fails
   - name: Initial tests

env:
    global:
        # The following versions are the 'default' for tests, unless
        # overridden underneath. They are defined here in order to save having
        # to repeat them for all configurations.
        - PYTHON_VERSION=3.7
        - NUMPY_VERSION=stable
        - ASTROPY_VERSION=stable
        - MAIN_CMD='python setup.py'
        - SETUP_CMD='test'
        - EVENT_TYPE='pull_request push'

        
        # List runtime dependencies for the package that are available as conda
        # packages here.
        - CONDA_DEPENDENCIES=''
        - CONDA_DEPENDENCIES_DOC='sphinx-astropy'
        
        # List other runtime dependencies for the package that are available as
        # pip packages here.
        - PIP_DEPENDENCIES=''

        # Conda packages for affiliated packages are hosted in channel
        # "astropy" while builds for astropy LTS with recent numpy versions
        # are in astropy-ci-extras. If your package uses either of these,
        # add the channels to CONDA_CHANNELS along with any other channels
        # you want to use.
        - CONDA_CHANNELS='astropy'

        # If there are matplotlib or other GUI tests, uncomment the following
        # line to use the X virtual framebuffer.
        # - SETUP_XVFB=True

        # If you want to ignore certain flake8 errors, you can list them
        # in FLAKE8_OPT, for example:
        # - FLAKE8_OPT='--ignore=E501'
        - FLAKE8_OPT=''

matrix:

    # Don't wait for allowed failures
    fast_finish: true

    include:
        # Make sure that egg_info works without dependencies
        - stage: Initial tests
          env: PYTHON_VERSION=3.7 SETUP_CMD='egg_info'

        # Test python 2.7
        - python: 2.7

        # Try MacOS X, usually enough only to run from cron as hardly there are
        # issues that are not picked up by a linux worker
        - os: osx
          env: SETUP_CMD='test' EVENT_TYPE='cron'

        # Do a coverage test.
        #- os: linux
        #  env: SETUP_CMD='test --coverage'

        # Check for sphinx doc build warnings - we do this first because it
        # may run for a long time
        - os: linux
          env: SETUP_CMD='build_docs -w'
               CONDA_DEPENDENCIES=$CONDA_DEPENDENCIES_DOC

        # Now try Astropy dev with the latest Python and LTS with and 3.x.
        - os: linux
          env: ASTROPY_VERSION=development
               EVENT_TYPE='pull_request push cron'
        - os: linux
          env: PYTHON_VERSION=3.6 ASTROPY_VERSION=lts NUMPY_VERSION=1.13

        # Add a job that runs from cron only and tests against astropy dev and
        # numpy dev to give a change for early discovery of issues and feedback
        # for both developer teams.
        - os: linux
          env: ASTROPY_VERSION=development NUMPY_VERSION=development
               EVENT_TYPE='cron'

        # Try on Windows.
        - os: windows
          env: SETUP_CMD='test'

        # Try all python versions and Numpy versions. Since we can assume that
        # the Numpy developers have taken care of testing Numpy with different
        # versions of Python, we can vary Python and Numpy versions at the same
        # time.

        - os: linux
          env: PYTHON_VERSION=3.6 NUMPY_VERSION=1.14
        - os: linux
          env: NUMPY_VERSION=1.15


    allow_failures:
        # Do a PEP8 test with flake8
        # (do allow to fail unless your code completely compliant)
        # - os: linux
        #   env: MAIN_CMD='flake8 stips --count --show-source --statistics $FLAKE8_OPT' SETUP_CMD=''

        # Do a PEP8 test with flake8
        - os: linux
          env: MAIN_CMD='flake8 stips --count --show-source --statistics $FLAKE8_OPT' SETUP_CMD=''


before_install:

    # Download stips data
    - wget https://stsci.box.com/shared/static/d4repaci5st9mp0qstlynt67q6qwpig0.gz -O /tmp/stips_data_v1.0.8.tar.gz
    - tar -xzvf /tmp/stips_data_v1.0.8.tar.gz
    - export stips_data=$PWD/stips_data

before_install:
    - docker build -t stips .
    - docker run -d -p 127.0.0.1:80:4567 stips /bin/sh -c "cd /root; bundle exec foreman start;"
    - docker ps -a
    - docker run stips /bin/sh -c "cd /root; bundle exec rake test"

script:
    - bundle exec rake test
